//===-- MMIXISelDAGToDAG.cpp - A dag to dag inst selector for MMIX ------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the MMIX target.
//
//===----------------------------------------------------------------------===//

#include "MMIX.h"
#include "MCTargetDesc/MMIXMCTargetDesc.h"
#include "MMIXTargetMachine.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/MathExtras.h"
#include "llvm/Support/raw_ostream.h"
using namespace llvm;

#define DEBUG_TYPE "mmix-isel"

// MMIX-specific code to select MMIX machine instructions for
// SelectionDAG operations.
namespace {
class MMIXDAGToDAGISel final : public SelectionDAGISel {
public:
  explicit MMIXDAGToDAGISel(MMIXTargetMachine &TargetMachine)
      : SelectionDAGISel(TargetMachine) {}

  StringRef getPassName() const override {
    return "MMIX DAG->DAG Pattern Instruction Selection";
  }

  void Select(SDNode *Node) override;

// Include the pieces autogenerated from the target description.
#include "MMIXGenDAGISel.inc"
};
}

void MMIXDAGToDAGISel::Select(SDNode *Node) {
  // If we have a custom node, we have already selected
  if (Node->isMachineOpcode()) {
    LLVM_DEBUG(dbgs() << "== "; Node->dump(CurDAG); dbgs() << "\n");
    Node->setNodeId(-1);
    return;
  }

  // Select the default instruction.
  SelectCode(Node);
}

// This pass converts a legalized DAG into a MMIX-specific DAG, ready
// for instruction scheduling.
FunctionPass *llvm::createMMIXISelDag(MMIXTargetMachine &TM) {
  return new MMIXDAGToDAGISel(TM);
}
