//===-- MMIXSubtarget.h - Define Subtarget for the MMIX -------*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file declares the MMIX specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_MMIX_MMIXSUBTARGET_H
#define LLVM_LIB_TARGET_MMIX_MMIXSUBTARGET_H

#include "MMIXFrameLowering.h"
#include "MMIXISelLowering.h"
#include "MMIXInstrInfo.h"
#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/Target/TargetMachine.h"

#define GET_SUBTARGETINFO_HEADER
#include "MMIXGenSubtargetInfo.inc"

namespace llvm {
class StringRef;

class MMIXSubtarget : public MMIXGenSubtargetInfo {
  virtual void anchor();
  MMIXFrameLowering FrameLowering;
  MMIXInstrInfo InstrInfo;
  MMIXRegisterInfo RegInfo;
  MMIXTargetLowering TLInfo;
  SelectionDAGTargetInfo TSInfo;

  /// Initializes using the passed in CPU and feature strings so that we can
  /// use initializer lists for subtarget initialization.
  MMIXSubtarget &initializeSubtargetDependencies(StringRef CPU, StringRef FS);

public:
  // Initializes the data members to match that of the specified triple.
  MMIXSubtarget(const Triple &TT, const std::string &CPU,
                const std::string &FS, const TargetMachine &TM);

  // Parses features string setting specified subtarget options. The
  // definition of this function is auto-generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef FS);

  const MMIXFrameLowering *getFrameLowering() const override {
    return &FrameLowering;
  }
  const MMIXInstrInfo *getInstrInfo() const override { return &InstrInfo; }
  const MMIXRegisterInfo *getRegisterInfo() const override {
    return &RegInfo;
  }
  const MMIXTargetLowering *getTargetLowering() const override {
    return &TLInfo;
  }
  const SelectionDAGTargetInfo *getSelectionDAGInfo() const override {
    return &TSInfo;
  }
};
} // End llvm namespace

#endif
