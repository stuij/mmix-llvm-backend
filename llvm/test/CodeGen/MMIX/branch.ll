; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=mmix -verify-machineinstrs < %s | FileCheck %s

define void @foo(i64 %a, i64 *%b, i1 %c) {
; CHECK-LABEL: foo:
; CHECK:       % %bb.0:
; CHECK-NEXT:    ldo $16,$232,0x0
; CHECK-NEXT:    cmp $16,$16,$231
; CHECK-NEXT:    bz $16,.LBB0_12
; CHECK-NEXT:    jmp .LBB0_1
; CHECK-NEXT:  .LBB0_1: % %test2
; CHECK-NEXT:    ldo $16,$232,0x0
; CHECK-NEXT:    cmp $16,$16,$231
; CHECK-NEXT:    bnz $16,.LBB0_12
; CHECK-NEXT:    jmp .LBB0_2
; CHECK-NEXT:  .LBB0_2: % %test3
; CHECK-NEXT:    ldo $16,$232,0x0
; CHECK-NEXT:    cmp $16,$16,$231
; CHECK-NEXT:    bn $16,.LBB0_12
; CHECK-NEXT:    jmp .LBB0_3
; CHECK-NEXT:  .LBB0_3: % %test4
; CHECK-NEXT:    ldo $16,$232,0x0
; CHECK-NEXT:    cmp $16,$16,$231
; CHECK-NEXT:    bnn $16,.LBB0_12
; CHECK-NEXT:    jmp .LBB0_4
; CHECK-NEXT:  .LBB0_4: % %test5
; CHECK-NEXT:    ldo $16,$232,0x0
; CHECK-NEXT:    cmpu $16,$16,$231
; CHECK-NEXT:    bn $16,.LBB0_12
; CHECK-NEXT:    jmp .LBB0_5
; CHECK-NEXT:  .LBB0_5: % %test6
; CHECK-NEXT:    ldo $16,$232,0x0
; CHECK-NEXT:    cmpu $16,$16,$231
; CHECK-NEXT:    bnn $16,.LBB0_12
; CHECK-NEXT:    jmp .LBB0_6
; CHECK-NEXT:  .LBB0_6: % %test7
; CHECK-NEXT:    ldo $16,$232,0x0
; CHECK-NEXT:    cmp $16,$16,$231
; CHECK-NEXT:    bp $16,.LBB0_12
; CHECK-NEXT:    jmp .LBB0_7
; CHECK-NEXT:  .LBB0_7: % %test8
; CHECK-NEXT:    ldo $16,$232,0x0
; CHECK-NEXT:    cmp $16,$16,$231
; CHECK-NEXT:    bnp $16,.LBB0_12
; CHECK-NEXT:    jmp .LBB0_8
; CHECK-NEXT:  .LBB0_8: % %test9
; CHECK-NEXT:    ldo $16,$232,0x0
; CHECK-NEXT:    cmpu $16,$16,$231
; CHECK-NEXT:    bp $16,.LBB0_12
; CHECK-NEXT:    jmp .LBB0_9
; CHECK-NEXT:  .LBB0_9: % %test10
; CHECK-NEXT:    ldo $16,$232,0x0
; CHECK-NEXT:    cmpu $16,$16,$231
; CHECK-NEXT:    bnp $16,.LBB0_12
; CHECK-NEXT:    jmp .LBB0_10
; CHECK-NEXT:  .LBB0_10: % %test11
; CHECK-NEXT:    ldo $16,$232,0x0
; CHECK-NEXT:    and $16,$233,0x1
; CHECK-NEXT:    bnz $16,.LBB0_12
; CHECK-NEXT:    jmp .LBB0_11
; CHECK-NEXT:  .LBB0_11: % %test12
; CHECK-NEXT:    ldo $16,$232,0x0
; CHECK-NEXT:  .LBB0_12: % %end
; CHECK-NEXT:    pop 0x0,0x0
  %val1 = load volatile i64, i64* %b
  %tst1 = icmp eq i64 %val1, %a
  br i1 %tst1, label %end, label %test2

test2:
  %val2 = load volatile i64, i64* %b
  %tst2 = icmp ne i64 %val2, %a
  br i1 %tst2, label %end, label %test3

test3:
  %val3 = load volatile i64, i64* %b
  %tst3 = icmp slt i64 %val3, %a
  br i1 %tst3, label %end, label %test4

test4:
  %val4 = load volatile i64, i64* %b
  %tst4 = icmp sge i64 %val4, %a
  br i1 %tst4, label %end, label %test5

test5:
  %val5 = load volatile i64, i64* %b
  %tst5 = icmp ult i64 %val5, %a
  br i1 %tst5, label %end, label %test6

test6:
  %val6 = load volatile i64, i64* %b
  %tst6 = icmp uge i64 %val6, %a
  br i1 %tst6, label %end, label %test7

; Check for condition codes that don't have a matching instruction

test7:
  %val7 = load volatile i64, i64* %b
  %tst7 = icmp sgt i64 %val7, %a
  br i1 %tst7, label %end, label %test8

test8:
  %val8 = load volatile i64, i64* %b
  %tst8 = icmp sle i64 %val8, %a
  br i1 %tst8, label %end, label %test9

test9:
  %val9 = load volatile i64, i64* %b
  %tst9 = icmp ugt i64 %val9, %a
  br i1 %tst9, label %end, label %test10

test10:
  %val10 = load volatile i64, i64* %b
  %tst10 = icmp ule i64 %val10, %a
  br i1 %tst10, label %end, label %test11

; Check the case of a branch where the condition was generated in another
; function

test11:
  %val11 = load volatile i64, i64* %b
  br i1 %c, label %end, label %test12

test12:
  %val12 = load volatile i64, i64* %b
  br label %end

end:
  ret void
}
